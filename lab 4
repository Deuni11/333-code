/*
 * GccApplication2.c
 *
 * Created: 29/04/2022 1:44:18 PM
 * Author : dsp852
 */
 //generating a pwm signal with variable frequency and duty cycle 

#include <avr\io.h>
#include <avr\interrupt.h>
#include <stdio.h>


void init_USART(){

// Normal speed, disable multi-proc

// No settings

UCSRA = 0b00000000;

// Enable Tx and Rx, enable RX interrupt


UCSRB = 0b00011000;


// Asynchronous mode, no parity, 1 stop bit, 8 data bits

//UCSRC.7 1=Write to UCSRC 0=Write to UBBRH

//

UCSRC = 0b10000110;

// Baud rate 1200bps, assuming 1MHz clock

UBRRL = 0x33;

UBRRH = 0x00;


return;

}





int serial_send(char c, FILE *stream){
// Wait until UDRE flag is set to logic 1
while ((UCSRA & (1 << UDRE)) == 0x00){;}
UDR = c; // Write character to UDR for transmission
return 0;
}
int serial_receive(FILE *stream){
// Wait until RXC flag is set to logic 1
while ((UCSRA & (1 << RXC)) == 0x00){;}
return UDR; // Read the received character from UDR
}


int main(void) {
long unsigned hightime, frequency, duty_cycle, period;
init_USART();
stdout= fdevopen(serial_send,NULL);
stdin=fdevopen(NULL, serial_receive);
DDRD = 0b00100000;
TCCR1A = 0b10000010;
TCCR1B = 0b00011001;
while(1){
printf("/n/r input frequency");
scanf("%ld",&frequency);
period=1000000ul/frequency;
ICR1= period;
printf("/n/r dutycycle");
scanf("%ld",&duty_cycle);
hightime= (period/100)*duty_cycle;
OCR1A= hightime;
}
return 0;
}



